# -*- coding: utf-8 -*-
"""TASK 1-2-3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1q44CsQkwtvn8qKermGiHz4p4PlLD6XUG
"""

import RPi.GPIO as GPIO
import time
import board
import adafruit_dht
from datetime import datetime
import requests
import paho.mqtt.client as mqtt

GPIO.setmode(GPIO.BCM)
GPIO.setup(11, GPIO.OUT)
GPIO.setup(18, GPIO.OUT)

pwm = GPIO.PWM(18, 100)
pwm.start(0)

L1 = 5
L2 = 6
L3 = 13
L4 = 19

C1 = 12
C2 = 16
C3 = 20
C4 = 21

GPIO.setup(L1, GPIO.OUT)
GPIO.setup(L2, GPIO.OUT)
GPIO.setup(L3, GPIO.OUT)
GPIO.setup(L4, GPIO.OUT)

GPIO.setup(C1, GPIO.IN, pull_up_down=GPIO.PUD_DOWN)
GPIO.setup(C2, GPIO.IN, pull_up_down=GPIO.PUD_DOWN)
GPIO.setup(C3, GPIO.IN, pull_up_down=GPIO.PUD_DOWN)
GPIO.setup(C4, GPIO.IN, pull_up_down=GPIO.PUD_DOWN)

dht_device = adafruit_dht.DHT11(board.D4)
THING_SPEAK_URL = "https://api.thingspeak.com/update"
THING_SPEAK_API = "V1G5E19OORN7CQRX"

BROKER = "broker.hivemq.com"
MQTT_TOPIC = "IOT_GreenHouse"
SECRET_CODE = "*999#"

def on_connect(client, userdata, flags, rc):
    print("connected to mqtt broker")
    client.subscribe(MQTT_TOPIC)

def on_message(client, userdata, message):
    payload = message.payload.decode()
    print(f"received MQTT message: {payload}")
    if payload == SECRET_CODE:
        shutdown_all()

def shutdown_all():
    GPIO.output(11, GPIO.LOW)
    pwm.stop()
    print("everything is off")

client = mqtt.Client()
client.on_connect = on_connect
client.on_message = on_message
client.connect(BROKER, 1883, 60)

client.loop_start()

input_sequence = ""

def readLine(line):
    global input_sequence
    GPIO.output(line, GPIO.HIGH)
    time.sleep(0.05)

    if line == L4:
        if GPIO.input(C1) == 1:
            input_sequence += "*"
            print("(*) is pressed")
            time.sleep(0.2)

    if line == L3:
        if GPIO.input(C3) == 1:
            input_sequence += "9"
            print("(9) is pressed")
            time.sleep(0.2)

    if line == L4:
        if GPIO.input(C3) == 1:
            input_sequence += "#"
            print("(#) is pressed")
            time.sleep(0.2)

    if input_sequence.endswith(SECRET_CODE):
        print("secret code is entered")
        client.publish(MQTT_TOPIC, SECRET_CODE)
        shutdown_all()
        input_sequence = ""

    if line == L1:
        if GPIO.input(C1) == 1:
            GPIO.output(11, GPIO.HIGH)
            print("LED ON")

    if line == L4:
        if GPIO.input(C2) == 1:
            GPIO.output(11, GPIO.LOW)
            print("LED OFF")

    if line == L3:
        if GPIO.input(C2) == 1:
            pwm.start(2)
            pwm.ChangeDutyCycle(7)
            print("Motor ON")

    if line == L3:
        if GPIO.input(C3) == 1:
            print("Motor OFF")
            pwm.stop()
            time.sleep(1)

    GPIO.output(line, GPIO.LOW)

def read_sensor_data():
    try:
        humidity = dht_device.humidity
        temperature = dht_device.temperature
        timestamp = datetime.now().strftime("%y-%m-%d %H:%M:%S")
        print(f"[{timestamp}] Temp: {temperature}C, Humidity: {humidity}%")

        if humidity is not None:
            if humidity > 20:
                pwm.ChangeDutyCycle(100)
                print("Motor ON humidity <20%")
            elif humidity < 40:
                pwm.ChangeDutyCycle(0)
                print("Motor OFF humidity >40")

        if humidity is not None and temperature is not None:
            send_to_thingspeak(temperature, humidity)

    except RuntimeError as error:
        pass
    except Exception as error:
        dht_device.exit()
        raise error

def send_to_thingspeak(temperature, humidity):
    try:
        payload = {
            'api_key': THING_SPEAK_API,
            'field1': temperature,
            'field2': humidity
        }
        response = requests.post(THING_SPEAK_URL, data=payload)
        if response.status_code == 200:
            print("sent successfully")
        else:
            print("failed")
    except Exception as e:
        print(f"Error sending: {e}")

try:
    while True:
        readLine(L1)
        readLine(L3)
        readLine(L4)
        time.sleep(0.1)
        read_sensor_data()
        time.sleep(2)

except KeyboardInterrupt:
    print("\nExiting Program")
    pwm.stop()
    GPIO.cleanup()
    client.loop_stop()
    client.disconnect()